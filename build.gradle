
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenLocal()
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
    //skip Test tasks
    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("test")) {
                task.enabled = false
            }
        }
    }
}

apply plugin: 'java'
apply plugin: 'net.researchgate.release'

File signing_cfg = new File("$project.rootDir/signing.properties")
if(signing_cfg.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(signing_cfg))
    props.each { prop ->
        project.ext.set(prop.key, prop.value)
    }

}


release {
    failOnUnversionedFiles = true
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = false
    failOnUpdateNeeded = true
    revertOnFail = true
    tagTemplate = 'v${version}'
    scmAdapters = [
            net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }

}

//对于典型的 Java 项目，您可以添加一个javadocJar以及一个 sourceJar任务
task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}


subprojects {
    buildscript {
        repositories {
            mavenCentral()
            maven { url 'https://maven.aliyun.com/repository/public/' }
            mavenLocal()
        }
        dependencies {
            classpath 'com.netflix.nebula:gradle-ospackage-plugin:11.0.0'
        }
    }

    apply plugin: 'java'
    apply plugin: "java-library"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'



    repositories {
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenLocal()
    }

    dependencies {
        api("io.netty:netty-all:$netty_version") {
            exclude module: 'netty-transport-native-epoll'
            exclude module: 'netty-transport-classes-epoll'
            exclude module: 'netty-transport-classes-kqueue'
            exclude module: 'netty-resolver-dns-classes-macos'
            exclude module: 'netty-transport-native-kqueue'
            exclude module: 'netty-transport-native-unix-common'
            exclude module: 'netty-resolver-dns-native-macos'
        }
        api("org.slf4j:slf4j-api:$slf4j_version")

    }

    //对于典型的 Java 项目，您可以添加一个javadocJar以及一个 sourceJar任务
    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    // javadoc 配置，这里是自定义了 java doc 的一些配置
    javadoc {
        description = "Generates project-level javadoc for use in -javadoc jar"

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.version = true
        options.header = project.name
        options.addStringOption('Xdoclint:none', '-quiet')

        // suppress warnings due to cross-module @see and @link references;
        // note that global 'api' task does display all warnings.
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
        options.encoding = "UTF-8"  //编码一定要配置否则直接出错
        options.charSet = 'UTF-8'
    }

    // 并将它们与项目 jar 本身一起连接到 artifacts 集合中：
    artifacts {
        archives javadocJar, sourcesJar
    }

    publishing{
        publications {
            mavenJava(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                //如果不定义，则会按照以上默认值执行
                // 添加源码jar
                artifact sourcesJar
                // 添加javadocjar
                artifact javadocJar
                // 指定要发布的模块
                from components.java

                pom {
                    name = 'onlooker'
                    description = "旁观者，提供旁观服务"
                    // 构件主页
                    url = 'https://github.com/dibyang/onlooker'
                    // 许可证名称和地址
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    // 开发者信息
                    developers {
                        developer {
                            id = 'dib.yang'
                            name = 'yangzj'
                            email = 'dib.yang@gmail.com'
                        }
                    }
                    // 版本控制仓库地址
                    scm {
                        url = 'https://github.com/dibyang/onlooker'
                        connection = 'scm:git:https://github.com/dibyang/onlooker.git'
                        developerConnection = 'scm:git:https://github.com/dibyang/onlooker.git'
                    }
                }

            }
        }
        repositories {
            maven {
                // 发布仓库配置，这里基于version后缀是否为SNAPSHOT来区分发布到release库还是snapshots库
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                //认证用户和密码，在配置文件gradle.properties中配置
                //oss-sonatype的登录用户名和密码
                credentials {
                    username = findProperty("ossrhUsername")?:""
                    password = findProperty("ossrhPassword")?:""
                }
            }
        }
    }
    signing {
        sign publishing.publications.mavenJava
    }
}



